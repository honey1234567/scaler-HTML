<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <!-- Don't make any changes to the below HTML code -->
    <div class="container">
        <div class="products">
            <h3>Price: Rs300</h3>
            <button data-price="300">Buy</button>
        </div>
        <div class="products">
            <h3>Price: Rs100</h3>
            <button data-price="100">Buy</button>
        </div>
        <div class="products">
            <h3>Price: Rs200</h3>
            <button data-price="200">Buy</button>
        </div>
        <div class="products">
            <h3>Price: Rs400</h3>
            <button data-price="400">Buy</button>
        </div>
    </div>
    <div class="cart-total">
        <h3>Total:</h3>
        <p>Rs <span>0</span></p>
    </div>

   <script id="solution">
 
        let tPrice = 0;
        const debounce = (mainFunction, delay) => {
            // Declare a variable called 'timer' to store the timer ID
            let timer;

            // Return an anonymous function that takes in any number of arguments
            return function (...args) {
                // Clear the previous timer to prevent the execution of 'mainFunction'
                clearTimeout(timer);

                // Set a new timer that will execute 'mainFunction' after the specified delay
                timer = setTimeout(() => {
                    console.log(args)
                    mainFunction(...args);
                }, delay);
            };
        };
        let debounceFunc = debounce(updatePrice, 500);
        let btns = document.querySelectorAll("button");
        let pricetext = document.querySelector("p span");
               // Update the code given below to implement the debouncing functionality ======================================
               function updatePrice(e) {
                console.log(e)
            let price = Number(e.target.getAttribute("data-price"));
            tPrice += price;
            pricetext.innerText = tPrice;
        }
        for (let i = 0; i < btns.length; i++) {
            btns[i].addEventListener("click", function (e) {
                debounceFunc(e)
            });
        }
    </script>
</body>

</html>
<!-- 
can also write
  const debounce = ( delay) => {
            // Declare a variable called 'timer' to store the timer ID
            let timer;

            // Return an anonymous function that takes in any number of arguments
            return function (...args) {
                // Clear the previous timer to prevent the execution of 'mainFunction'
                clearTimeout(timer);

                // Set a new timer that will execute 'mainFunction' after the specified delay
                timer = setTimeout(() => {
                    console.log(args)
                    args[0](args[1]);
                }, delay);
            };
        };
        let debounceFunc = debounce( 500);
        let btns = document.querySelectorAll("button");
        let pricetext = document.querySelector("p span");
               // Update the code given below to implement the debouncing functionality ======================================
               function updatePrice(e) {
                console.log(e)
            let price = Number(e.target.getAttribute("data-price"));
            tPrice += price;
            pricetext.innerText = tPrice;
        }
        for (let i = 0; i < btns.length; i++) {
            btns[i].addEventListener("click", function (e) {
                debounceFunc(updatePrice,e)
            });
        }
    </script>
</body>

</html>

 -->
